{"version":3,"file":"commonHelpers.js","sources":["../src/js/render-functions.js","../src/js/pixabay-api.js","../src/main.js"],"sourcesContent":["\n//^================= метод appendChild ============================================\n// export function addImagesToGallery(images) {\n//     const gallery = document.getElementById('gallery');\n//     gallery.innerHTML = '';\n//     images.forEach(image => {\n//         const container = document.createElement('div');\n//         container.classList.add('image-container');\n\n//         const img = document.createElement('img');\n//         img.src = image.webformatURL;\n//         img.alt = image.tags;\n//         container.appendChild(img);\n\n//         const caption = document.createElement('div');\n//         caption.classList.add('image-caption');\n//         caption.innerHTML = `\n//             <span>Likes: ${image.user_likes}</span>\n//             <span>Views: ${image.user_views}</span>\n//             <span>Comments: ${image.user_comments}</span>\n//             <span>Downloads: ${image.user_downloads}</span>\n//         `;\n//         container.appendChild(caption);\n\n//         gallery.appendChild(container);\n//     });\n// }\n\n//^================= метод innerHTML ============================================\n\n// export function addImagesToGallery(images) {\n//     const gallery = document.getElementById('gallery');\n//     gallery.innerHTML = ''; // Очищаем галерею перед добавлением новых изображений\n\n//     images.forEach(image => {\n//         // Создаем HTML-разметку для каждого изображения и его информации\n//         const imageMarkup = `\n//             <div class=\"image-container\">\n//                 <img src=\"${image.webformatURL}\" alt=\"${image.tags}\">\n//                 <div class=\"image-caption\">\n//                     <span>Likes: ${image.user_likes}</span>\n//                     <span>Views: ${image.user_views}</span>\n//                     <span>Comments: ${image.user_comments}</span>\n//                     <span>Downloads: ${image.user_downloads}</span>\n//                 </div>\n//             </div>\n//         `;\n\n//         // Добавляем HTML-разметку в галерею с помощью innerHTML\n//         gallery.innerHTML += imageMarkup;\n//     });\n// }\n\n//^================= №2 метод innerHTML ============================================\nimport SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\nconst lightbox = new SimpleLightbox('.gallery a');\n\nexport function createGalleryMarkup(images) {\n    const gallery = document.querySelector('.gallery');\n    gallery.innerHTML = images\n        .map(\n            (image) => `\n    <div class=\"photo-card\">\n      <a href=\"${image.largeImageURL}\" target=\"_blank\">\n        <img src=\"${image.webformatURL}\" alt=\"${image.tags}\" loading=\"lazy\" />\n      </a>\n      <div class=\"info\">\n       <p><i class=\"img-text\">Likes </i><span>${image.likes}</span></p>\n        <p><i class=\"img-text\">Views </i><span>${image.views}</span></p>\n        <p><i class=\"img-text\">Comments </i><span>${image.comments}</span></p>\n        <p><i class=\"img-text\">Downloads </i><span>${image.downloads}</span></p>\n      </div>\n    </div>\n  `\n        )\n        .join('');\n    lightbox.refresh();\n}\n","// // Описаний у документації\n// import iziToast from \"izitoast\";\n// // Додатковий імпорт стилів\n// import \"izitoast/dist/css/iziToast.min.css\";\n// // Описаний у документації\n// import SimpleLightbox from \"simplelightbox\";\n// // Додатковий імпорт стилів\n// import \"simplelightbox/dist/simple-lightbox.min.css\";\n// //import { refs } from './pixabay-api';\n// import { addImagesToGallery } from './render-functions';\n\n// // const loader = document.getElementById('loader');\n\n// function handleFormSubmit(event) { //объявление функции\n//     event.preventDefault();\n//     // loader.style.display = 'block';\n//     const apiKey = '42334631-07f239856d3b6a49db441bfb9';\n//     const searchPicture = document.getElementById(\"searchRequest\").value.trim();\n//     //находим элемент с id (\"searchRequest\") (поле ввода) и получаем его значение (текст, введенный пользователем).\n//     //и удаляем лишние пробелы в начале и конце\n\n//     //! проверка на наличие только пробелов или пустой строки\n//     if (searchPicture === \"\") {\n//         // Всплывающее окно с предупреждением о пустом поле\n//         iziToast.warning({\n//             title: 'Warning',\n//             message: 'Please enter a search query.'\n//         });\n//         return false; // Предотвращение отправки формы\n//     }\n\n//     // Формирование параметров запроса для API Pixabay\n//     const params = new URLSearchParams({\n//         key: apiKey,\n//         q: searchPicture,\n//         image_type: 'photo',\n//         orientation: 'horizontal',\n//         safesearch: true\n//     });\n\n//     fetch(`https://pixabay.com/api/?key=${apiKey}&q=${encodeURIComponent(searchPicture)}${params}`)/// Отправка запроса к API Pixabay с использованием\n//         // параметров(params) запроса к серверу по указанному URL.\n\n//         // Проверка успешности ответа\n//         .then(response => {\n//             if (!response.ok) {   // Генерация ошибки, если ответ не успешен\n//                 throw new Error('Failed to fetch images');\n//             }\n//             return response.json(); //Мы обрабатываем ответ от сервера, преобразуя его в JSON.\n//         })\n\n//         .then(data => {  //продолжаем цепочку .then(), чтобы обработать полученные данные.\n//             //Здесь мы обрабатываем данные, полученные от сервера. Мы очищаем содержимое галереи,\n//             // а затем для каждого изображения в полученных данных создаем HTML - код,\n//             //который содержит ссылку на полное изображение(largeImageURL) и превью(previewURL), а также теги изображения(tags).\n//             const gallery = document.getElementById('gallery');// Получение элемента галереи изображений\n//             gallery.innerHTML = ''; //очищаем содержимое элемента галереи.\n//             if (data.hits.length === 0) { // Проверка наличия изображений в ответе\n//                 iziToast.info({\n//                     title: 'Info',\n//                     message: 'Sorry, there are no images matching your search query. Please try again!'\n//                 });\n//             } else {\n//                 const galleryMarkup = data.hits.map(image => {\n//                     return `<a href=\"${image.largeImageURL}\">\n// <img src=\"${image.previewURL}\" alt=\"${image.tags}\">\n// <div class=\"image-caption\">\n// <span>Likes: ${image.likes}</span>\n// <span>Views: ${image.views}</span>\n// <span>Comments: ${image.comments}</span>\n// <span>Downloads: ${image.downloads}</span>\n// </div>\n//                     </a>`;\n//                 }).join('');//объединение массива\n//                 gallery.innerHTML = galleryMarkup;// добавляем всю разметку в галерею одномоментно\n//                 new SimpleLightbox('.gallery a'); // инициализируем SimpleLightbox для всех ссылок\n//             }\n//             // loader.style.display = 'none';\n//         })\n//         .catch(error => {\n//             console.error('Error fetching images:', error);\n//             iziToast.error({\n//                 title: 'Error',\n//                 message: 'Failed to fetch images. Please try again later.',\n//             });\n//             // loader.style.display = 'none';\n//         });\n//     event.currentTarget.reset()//!очистка поля ввода\n//     return false; // чтобы форма не отправлялась после отправки запроса\n// }\n\n// const form = document.getElementById('searchForm');\n// form.addEventListener('submit', handleFormSubmit);\n\n//^================= ============ ============================================\n// Описаний у документації\nimport iziToast from \"izitoast\";\n// Додатковий імпорт стилів\nimport \"izitoast/dist/css/iziToast.min.css\";\n// Описаний у документації\nimport SimpleLightbox from \"simplelightbox\";\n// Додатковий імпорт стилів\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\nimport { createGalleryMarkup } from './render-functions.js';\n\nconst API_KEY = '42334631-07f239856d3b6a49db441bfb9';\n\nexport function fetchImages(query) {\n    const loader = document.querySelector('.loader');\n    loader.style.display = 'block';\n    fetch(`https://pixabay.com/api/?key=${API_KEY}&q=${encodeURIComponent(query)}&image_type=photo&orientation=horizontal&safesearch=true`)\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Failed to fetch images');\n            }\n            return response.json();\n        })\n        .then(data => {\n            console.log(data);\n            loader.style.display = 'none';\n            if (data.hits.length === 0) {\n                iziToast.info({\n                    title: 'Info',\n                    message: 'Sorry, there are no images matching your search query. Please try again!'\n                });\n            } else {\n                createGalleryMarkup(data.hits);\n            }\n        })\n        .catch(error => {\n            console.error('Error fetching images:', error);\n            loader.style.display = 'none';\n            iziToast.error({\n                title: 'Error',\n                message: 'Failed to fetch images. Please try again later.'\n            });\n        });\n}","// import SimpleLightbox from 'simplelightbox';\n// import 'simplelightbox/dist/simple-lightbox.min.css';\n// import \"simplelightbox/dist/simple-lightbox.min.css\";\n// import './js/pixabay-api';\n// import './js/render-functions';\n// export function clearGallery() {\n//     const gallery = document.getElementById('gallery');\n//     gallery.innerHTML = '';\n// }\n// clearGallery();\n//!==========================================================================\nimport { fetchImages } from './js/pixabay-api';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst form = document.querySelector('#search-form');\nconst input = document.querySelector('#search-input');\n\nform.addEventListener('submit', (event) => {\n    event.preventDefault();\n    const query = input.value.trim();\n    if (!query) {\n        iziToast.warning({\n            title: 'Warning',\n            message: 'Please enter a search query',\n        });\n        return;\n    }\n    fetchImages(query);\n    input.value = '';\n});\n"],"names":["lightbox","SimpleLightbox","createGalleryMarkup","images","gallery","image","API_KEY","fetchImages","query","loader","response","data","iziToast","error","form","input","event"],"mappings":"wvBAyDA,MAAMA,EAAW,IAAIC,EAAe,YAAY,EAEzC,SAASC,EAAoBC,EAAQ,CACxC,MAAMC,EAAU,SAAS,cAAc,UAAU,EACjDA,EAAQ,UAAYD,EACf,IACIE,GAAU;AAAA;AAAA,iBAENA,EAAM,aAAa;AAAA,oBAChBA,EAAM,YAAY,UAAUA,EAAM,IAAI;AAAA;AAAA;AAAA,gDAGVA,EAAM,KAAK;AAAA,iDACVA,EAAM,KAAK;AAAA,oDACRA,EAAM,QAAQ;AAAA,qDACbA,EAAM,SAAS;AAAA;AAAA;AAAA,GAI3D,EACA,KAAK,EAAE,EACZL,EAAS,QAAO,CACpB,CC0BA,MAAMM,EAAU,qCAET,SAASC,EAAYC,EAAO,CAC/B,MAAMC,EAAS,SAAS,cAAc,SAAS,EAC/CA,EAAO,MAAM,QAAU,QACvB,MAAM,gCAAgCH,CAAO,MAAM,mBAAmBE,CAAK,CAAC,0DAA0D,EACjI,KAAKE,GAAY,CACd,GAAI,CAACA,EAAS,GACV,MAAM,IAAI,MAAM,wBAAwB,EAE5C,OAAOA,EAAS,MAC5B,CAAS,EACA,KAAKC,GAAQ,CACV,QAAQ,IAAIA,CAAI,EAChBF,EAAO,MAAM,QAAU,OACnBE,EAAK,KAAK,SAAW,EACrBC,EAAS,KAAK,CACV,MAAO,OACP,QAAS,0EAC7B,CAAiB,EAEDV,EAAoBS,EAAK,IAAI,CAE7C,CAAS,EACA,MAAME,GAAS,CACZ,QAAQ,MAAM,yBAA0BA,CAAK,EAC7CJ,EAAO,MAAM,QAAU,OACvBG,EAAS,MAAM,CACX,MAAO,QACP,QAAS,iDACzB,CAAa,CACb,CAAS,CACT,CC/HA;AAKA,MAAME,EAAO,SAAS,cAAc,cAAc,EAC5CC,EAAQ,SAAS,cAAc,eAAe,EAEpDD,EAAK,iBAAiB,SAAWE,GAAU,CACvCA,EAAM,eAAc,EACpB,MAAMR,EAAQO,EAAM,MAAM,KAAI,EAC9B,GAAI,CAACP,EAAO,CACRI,EAAS,QAAQ,CACb,MAAO,UACP,QAAS,6BACrB,CAAS,EACD,MACH,CACDL,EAAYC,CAAK,EACjBO,EAAM,MAAQ,EAClB,CAAC"}