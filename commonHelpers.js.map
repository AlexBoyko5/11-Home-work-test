{"version":3,"file":"commonHelpers.js","sources":["../src/js/pixabay-api.js","../src/main.js"],"sourcesContent":["// Описаний у документації\nimport iziToast from \"izitoast\";\n// Додатковий імпорт стилів\nimport \"izitoast/dist/css/iziToast.min.css\";\n// Описаний у документації\nimport SimpleLightbox from \"simplelightbox\";\n// Додатковий імпорт стилів\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n//import { refs } from './pixabay-api';\nimport { addImagesToGallery } from './render-functions';\n\n// const loader = document.getElementById('loader');\n\nfunction handleFormSubmit(event) { //объявление функции\n    event.preventDefault();\n    // loader.style.display = 'block';\n    const apiKey = '42334631-07f239856d3b6a49db441bfb9';\n    const searchPicture = document.getElementById(\"searchRequest\").value.trim();\n    //находим элемент с id (\"searchRequest\") (поле ввода) и получаем его значение (текст, введенный пользователем).\n    //и удаляем лишние пробелы в начале и конце\n\n    //! проверка на наличие только пробелов или пустой строки\n    if (searchPicture === \"\") {\n        // Всплывающее окно с предупреждением о пустом поле\n        iziToast.warning({\n            title: 'Warning',\n            message: 'Please enter a search query.'\n        });\n        return false; // Предотвращение отправки формы\n    }\n\n    // Формирование параметров запроса для API Pixabay\n    const params = new URLSearchParams({\n        key: apiKey,\n        q: searchPicture,\n        image_type: 'photo',\n        orientation: 'horizontal',\n        safesearch: true\n    });\n\n    fetch(`https://pixabay.com/api/?key=${apiKey}&q=${encodeURIComponent(searchPicture)}${params}`)/// Отправка запроса к API Pixabay с использованием\n        // параметров(params) запроса к серверу по указанному URL.\n\n        // Проверка успешности ответа\n        .then(response => {\n            if (!response.ok) {   // Генерация ошибки, если ответ не успешен\n                throw new Error('Failed to fetch images');\n            }\n            return response.json(); //Мы обрабатываем ответ от сервера, преобразуя его в JSON.\n        })\n\n        .then(data => {  //продолжаем цепочку .then(), чтобы обработать полученные данные.\n            //Здесь мы обрабатываем данные, полученные от сервера. Мы очищаем содержимое галереи,\n            // а затем для каждого изображения в полученных данных создаем HTML - код,\n            //который содержит ссылку на полное изображение(largeImageURL) и превью(previewURL), а также теги изображения(tags).\n            const gallery = document.getElementById('gallery');// Получение элемента галереи изображений\n            gallery.innerHTML = ''; //очищаем содержимое элемента галереи.\n            if (data.hits.length === 0) { // Проверка наличия изображений в ответе\n                iziToast.info({\n                    title: 'Info',\n                    message: 'Sorry, there are no images matching your search query. Please try again!'\n                });\n            } else {\n                const galleryMarkup = data.hits.map(image => {\n                    return `<a href=\"${image.largeImageURL}\">\n<img src=\"${image.previewURL}\" alt=\"${image.tags}\">\n<div class=\"image-caption\">\n<span>Likes: ${image.likes}</span>\n<span>Views: ${image.views}</span>\n<span>Comments: ${image.comments}</span>\n<span>Downloads: ${image.downloads}</span>\n</div>\n                    </a>`;\n                }).join('');//объединение массива\n                gallery.innerHTML = galleryMarkup;// добавляем всю разметку в галерею одномоментно\n                new SimpleLightbox('.gallery a'); // инициализируем SimpleLightbox для всех ссылок\n            }\n            // loader.style.display = 'none';\n        })\n        .catch(error => {\n            console.error('Error fetching images:', error);\n            iziToast.error({\n                title: 'Error',\n                message: 'Failed to fetch images. Please try again later.',\n            });\n            // loader.style.display = 'none';\n        });\n    event.currentTarget.reset()//!очистка поля ввода\n    return false; // чтобы форма не отправлялась после отправки запроса\n}\n\nconst form = document.getElementById('searchForm');\nform.addEventListener('submit', handleFormSubmit);\n\n","import SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\nimport './js/pixabay-api.js';\nimport './js/render-functions.js';\nexport function clearGallery() {\n    const gallery = document.getElementById('gallery');\n    gallery.innerHTML = '';\n}\nclearGallery();"],"names":["handleFormSubmit","event","apiKey","searchPicture","iziToast","params","response","data","gallery","galleryMarkup","image","SimpleLightbox","error","form","clearGallery"],"mappings":"6vBAaA,SAASA,EAAiBC,EAAO,CAC7BA,EAAM,eAAc,EAEpB,MAAMC,EAAS,qCACTC,EAAgB,SAAS,eAAe,eAAe,EAAE,MAAM,OAIzE;AACI,GAAIA,IAAkB,GAElB,OAAAC,EAAS,QAAQ,CACb,MAAO,UACP,QAAS,8BACrB,CAAS,EACM,GAIX,MAAMC,EAAS,IAAI,gBAAgB,CAC/B,IAAKH,EACL,EAAGC,EACH,WAAY,QACZ,YAAa,aACb,WAAY,EACpB,CAAK,EAED,MAAM,gCAAgCD,CAAM,MAAM,mBAAmBC,CAAa,CAAC,GAAGE,CAAM,EAAE,EAIzF,KAAKC,GAAY,CACd,GAAI,CAACA,EAAS,GACV,MAAM,IAAI,MAAM,wBAAwB,EAE5C,OAAOA,EAAS,MAC5B,CAAS,EAEA,KAAKC,GAAQ,CAIV,MAAMC,EAAU,SAAS,eAAe,SAAS,EAEjD,GADAA,EAAQ,UAAY,GAChBD,EAAK,KAAK,SAAW,EACrBH,EAAS,KAAK,CACV,MAAO,OACP,QAAS,0EAC7B,CAAiB,MACE,CACH,MAAMK,EAAgBF,EAAK,KAAK,IAAIG,GACzB,YAAYA,EAAM,aAAa;AAAA,YAC9CA,EAAM,UAAU,UAAUA,EAAM,IAAI;AAAA;AAAA,eAEjCA,EAAM,KAAK;AAAA,eACXA,EAAM,KAAK;AAAA,kBACRA,EAAM,QAAQ;AAAA,mBACbA,EAAM,SAAS;AAAA;AAAA,yBAGjB,EAAE,KAAK,EAAE,EACVF,EAAQ,UAAYC,EACpB,IAAIE,EAAe,YAAY,CAClC,CAEb,CAAS,EACA,MAAMC,GAAS,CACZ,QAAQ,MAAM,yBAA0BA,CAAK,EAC7CR,EAAS,MAAM,CACX,MAAO,QACP,QAAS,iDACzB,CAAa,CAEb,CAAS,EACLH,EAAM,cAAc,MAAO,EAAA;AAC3B,MAAO,EACX,CAEA,MAAMY,EAAO,SAAS,eAAe,YAAY,EACjDA,EAAK,iBAAiB,SAAUb,CAAgB,ECvFzC,SAASc,GAAe,CAC3B,MAAMN,EAAU,SAAS,eAAe,SAAS,EACjDA,EAAQ,UAAY,EACxB,CACAM,EAAc"}