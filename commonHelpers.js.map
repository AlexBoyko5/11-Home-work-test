{"version":3,"file":"commonHelpers.js","sources":["../src/js/pixabay-api.js"],"sourcesContent":["// Описаний у документації\nimport iziToast from \"izitoast\";\n// Додатковий імпорт стилів\nimport \"izitoast/dist/css/iziToast.min.css\";\n// Описаний у документації\nimport SimpleLightbox from \"simplelightbox\";\n// Додатковий імпорт стилів\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n//import { refs } from './pixabay-api';\n\nfunction searchRequest(event) { //объявление функции\n    event.preventDefault();\n    const apiKey = '42334631-07f239856d3b6a49db441bfb9';\n    const searchPicture = document.getElementById(\"searchRequest\").value.trim();\n    //находим элемент с id (\"searchRequest\") (поле ввода) и получаем его значение (текст, введенный пользователем).\n    //и удаляем лишние пробелы в начале и конце\n\n    //! проверка на наличие только пробелов или пустой строки\n    if (searchPicture === \"\") {\n        // Всплывающее окно с предупреждением о пустом поле\n        iziToast.warning({\n            title: 'Warning',\n            message: 'Please enter a search query.'\n        });\n        return false; // Предотвращение отправки формы\n    }\n\n    // Формирование параметров запроса для API Pixabay\n    const params = new URLSearchParams({\n        key: apiKey,\n        q: searchPicture,\n        image_type: 'photo',\n        orientation: 'horizontal',\n        safesearch: true\n    });\n\n    fetch(`https://api.example.com/api/?${params}`)/// Отправка запроса к API Pixabay с использованием\n        // параметров(params) запроса к серверу по указанному URL.\n\n        // Проверка успешности ответа\n        .then(response => {\n            if (!response.ok) {   // Генерация ошибки, если ответ не успешен\n                throw new Error('Failed to fetch images');\n            }\n            return response.json(); //Мы обрабатываем ответ от сервера, преобразуя его в JSON.\n        })\n\n        .then(data => {  //продолжаем цепочку .then(), чтобы обработать полученные данные.\n            //Здесь мы обрабатываем данные, полученные от сервера. Мы очищаем содержимое галереи,\n            // а затем для каждого изображения в полученных данных создаем HTML - код,\n            //который содержит ссылку на полное изображение(largeImageURL) и превью(previewURL), а также теги изображения(tags).\n            const gallery = document.getElementById('gallery');// Получение элемента галереи изображений\n            gallery.innerHTML = ''; //очищаем содержимое элемента галереи.\n            if (data.hits.length === 0) { // Проверка наличия изображений в ответе\n                iziToast.info({\n                    title: 'Info',\n                    message: 'Sorry, there are no images matching your search query. Please try again!'\n                });\n            } else {\n                data.hits.forEach(image => { // Перебор найденных изображений и добавление их в галерею\n                    gallery.innerHTML += `<a href=\"${image.largeImageURL}\"><img src=\"${image.previewURL}\" alt=\"${image.tags}\"></a>`;\n                });\n                new SimpleLightbox('.gallery a'); // инициализируем SimpleLightbox для всех ссылок\n                //на изображения в галерее после того, как они были добавлены.\n            }\n        })\n        .catch(error => {\n            console.error('Error fetching images:', error);\n            iziToast.error({\n                title: 'Error',\n                message: 'Failed to fetch images. Please try again later.'\n            });\n        });\n    return false; // чтобы форма не отправлялась после отправки запроса\n}\n\nconst form = document.getElementById('searchForm');\nform.addEventListener('submit', handleFormSubmit);"],"names":["form"],"mappings":"0uBA4EA,MAAMA,EAAO,SAAS,eAAe,YAAY,EACjDA,EAAK,iBAAiB,SAAU,gBAAgB"}